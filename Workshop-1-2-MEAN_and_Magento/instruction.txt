============================================================================================
Lab Description
============================================================================================
Machine name		            	Roles:					IP Address: (Private)		IP Address: (Public)       SSH
Training_JMeter_StudentGX_1      Load Test Machine			10.0.1.X 					  X.X.X.X   	             ssh -i "docker_lab.pem" ubuntu@X.X.X.X
Training_JMeter_StudentGX_1      Application Machine        10.0.1.X 				      X.X.X.X                    ssh -i "docker_lab.pem" ubuntu@X.X.X.X      
============================================================================================

Part0 : Start Performance Test (Load Test Machine)
============================================================================================
0. In case UltraVNC is cannot connect. Kill and recreate vnc session by command:
    vncserver -kill :1
    vncserver -localhost no -geometry 1600x900 :1

============================================================================================
Step 1: Setup MEAN.JS (Application Machine)
============================================================================================
0. (Application Machine) Install performance monitor tools
sudo su -
apt-get update && sudo apt-get install iptraf blktrace nicstat linux-tools-common linux-tools-generic systemtap trace-cmd tiptop msr-tools smartmontools sysstat -y && apt install perf-tools-unstable
curl https://s3.amazonaws.com/download.draios.com/stable/install-sysdig -o install-sysdig && cat ./install-sysdig | sudo bash
sed -i -e 's/false/true/g' /etc/default/sysstat
sed -i -e 's/5-55/*/g' /etc/cron.d/sysstat
sed -i -e 's/10/2/g' /etc/cron.d/sysstat
exit

1. (Application Machine) Pull image for meanjs by command: 
    docker image pull mongo:5.0-rc
    docker image pull mongo-express:0.54
    docker image pull meanjs/mean:latest
    docker image pull labdocker/cadvisor:latest

2. (Application Machine) Start create network and basic meanstack by command:
    docker container run -dt -p 27017:27017 --name db mongo
    docker logs -f db (Wait until log is stop)
    docker container run -dt -p 3000:3000 --link db:db_1 --name mean meanjs/mean:latest
    docker logs -f mean (Wait until log is stop)
   *Remark: 
        2.1 Wait until mean ready with simple log below
        2.2 In case need to remove and redeploy please kindly following command below:
            docker stop mean db && docker rm mean db

---------------------------------------------------------------------------------------------
MEAN.JS - Development Environment

Environment:     development
Server:          http://0.0.0.0:3000
Database:        mongodb://172.17.0.2/mean-dev
App version:     0.6.0
MEAN.JS version: 0.6.0
---------------------------------------------------------------------------------------------

3. (Load Test Machine) Test access web from url: curl http://<private ip of Application Machine>:3000

4. (Application Machine) Run mongo-express for provide mongodb webgui by command:
    docker container run -dt --name mongoexpress -e ME_CONFIG_MONGODB_SERVER=db_1 --link db:db_1  -p 8081:8081 mongo-express:0.54

5. (Application Machine) Start monitoring dashboard for performance analysis by command:
	docker container run \
	--mount type=bind,source=/var/run,target=/var/run \
	--mount type=bind,source=/sys,target=/sys,readonly \
	--mount type=bind,source=/var/lib/docker,target=/var/lib/docker,readonly \
	--publish=8080:8080 \
	--detach=true \
	--name=cadvisor \
	labdocker/cadvisor:latest

6. (Load Test Machine) Check meanjs, open cadvisor and mongoexpress by webbrowser:
    Open url: http://<private ip of MEAN.JS>:3000   ==> for MEAN Application
    Open url: http://<private ip of MEAN.JS>:8080   ==> for cAdvisor
    Open url: http://<private ip of MEAN.JS>:8081   ==> for Mongo-express
    
*Remark:
    Case Roll Back:
        docker stop mean mongoexpress cadvisor db
        docker rm mean mongoexpress cadvisor db

============================================================================================
Step 2: Setup Magento (Application Machine)
============================================================================================
1. (Application Machine) Pull image by command: 
    docker image pull bitnami/mariadb:latest
    docker image pull bitnami/magento:latest
    docker image pull bitnami/phpmyadmin:latest
    docker image pull elasticsearch:7.13.3

2. (Application Machine) Run docker container mariadb/elasticseach by command:
    docker container run -dt --name mariadb \
    -e MARIADB_USER=magento \
    -e MARIADB_PASSWORD=magento \
    -e MARIADB_DATABASE=magento \
    -e MARIADB_ROOT_PASSWORD=P@ssw0rd \
    -p 3306:3306 \
     bitnami/mariadb:latest

    docker run -dt --name elasticsearch \
    -p 9200:9200 -p 9300:9300 \
    -e "discovery.type=single-node" elasticsearch:7.13.3
    

3. (Application Machine) Run docker container magento by command:
    docker container run -dt --name magento -p 80:80 -p 443:443\
    -e MAGENTO_DATABASE_USER=magento \
    -e MAGENTO_DATABASE_PASSWORD=magento \
    -e MAGENTO_DATABASE_NAME=magento \
    -e MAGENTO_HOST="<Private IP>" \
    --link mariadb:bitnami_magento \
    --link elasticsearch:elasticsearch \
    bitnami/magento:latest   

    *Remark:
    DB Name: magento
    DB Username: magento
    DB Password: magento
    Root Password: P@ssw0rd

4. (Application Machine) Run docker container phpmyadmin by command:
    docker run -dt --name phpmyadmin -p 8091:80 \
    -e DATABASE_HOST=mariadb \
    -e DATABASE_PORT_NUMBER=3306 \
    -e PHPMYADMIN_ALLOW_NO_PASSWORD=false \
    --link mariadb:mariadb \
    bitnami/phpmyadmin:latest

5. (Application Machine) Check logging of Magento:
    docker container logs -f magento
    ****************************************************************************************
magento INFO  Flushing cache...
magento INFO  Cleaning up cache folders after installing
magento INFO 
magento INFO  ########################################################################
magento INFO   Installation parameters for magento:
magento INFO     Username: user
magento INFO     Site URL: http://13.250.47.131/
magento INFO     Admin URL: http://13.250.47.131/admin
magento INFO   This installation requires no credentials.
magento INFO  ########################################################################
magento INFO 
nami    INFO  magento successfully initialized
    ****************************************************************************************

8. (Load Test Machine) Open phpmyadmin and get username/password of Magento:
    Open url: http://<private ip of Magento>:8091   ==> for phpmyadmin   (username:root, password: P@ssw0rd)

9. (Load Test Machine) Open url for website
    Open url: http://<private ip of Magento>       ==> for Magento Application
    Open url: http://<private ip of Magento>/admin  ==> for Magento Application (Admin Page) (User: user, Password: bitnami1)
    
*Remark:
    Case Roll Back:
        docker stop magento phpmyadmin mariadb
        docker rm magento phpmyadmin mariadb